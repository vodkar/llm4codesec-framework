{
    "experiment_metadata": {
        "name": "CVEFixes Benchmark LLM Evaluation",
        "description": "Comprehensive evaluation of LLMs on CVEFixes benchmark with multiple prompt strategies",
        "version": "1.0",
        "dataset": "CVEFixes-Benchmark v1.0",
        "created_date": "2025-06-12"
    },
    "dataset_configurations": {
        "binary_c_file": {
            "dataset_path": "datasets_processed/cvefixes/cvefixes_binary_c_file.json",
            "task_type": "binary_vulnerability",
            "description": "Binary classification: C file-level vulnerability detection"
        },
        "binary_c_method": {
            "dataset_path": "datasets_processed/cvefixes/cvefixes_binary_c_method.json",
            "task_type": "binary_vulnerability",
            "description": "Binary classification: C method-level vulnerability detection"
        },
        "multiclass_c_file": {
            "dataset_path": "datasets_processed/cvefixes/cvefixes_multiclass_c_file.json",
            "task_type": "multiclass_vulnerability",
            "description": "Multi-class classification: C file-level CWE identification"
        },
        "multiclass_c_method": {
            "dataset_path": "datasets_processed/cvefixes/cvefixes_multiclass_c_method.json",
            "task_type": "multiclass_vulnerability",
            "description": "Multi-class classification: C method-level CWE identification"
        },
        "binary_java_file": {
            "dataset_path": "datasets_processed/cvefixes/cvefixes_binary_java_file.json",
            "task_type": "binary_vulnerability",
            "description": "Binary classification: Java file-level vulnerability detection"
        },
        "binary_python_file": {
            "dataset_path": "datasets_processed/cvefixes/cvefixes_binary_python_file.json",
            "task_type": "binary_vulnerability",
            "description": "Binary classification: Python file-level vulnerability detection"
        },
        "binary_java_method": {
            "dataset_path": "datasets_processed/cvefixes/cvefixes_binary_java_method.json",
            "task_type": "binary_vulnerability",
            "description": "Binary classification: Java method-level vulnerability detection"
        },
        "binary_python_method": {
            "dataset_path": "datasets_processed/cvefixes/cvefixes_binary_python_method.json",
            "task_type": "binary_vulnerability",
            "description": "Binary classification: Python method-level vulnerability detection"
        },
        "multiclass_java_file": {
            "dataset_path": "datasets_processed/cvefixes/cvefixes_multiclass_java_file.json",
            "task_type": "multiclass_vulnerability",
            "description": "Multi-class classification: Java file-level CWE identification"
        },
        "multiclass_java_method": {
            "dataset_path": "datasets_processed/cvefixes/cvefixes_multiclass_java_method.json",
            "task_type": "multiclass_vulnerability",
            "description": "Multi-class classification: Java method-level CWE identification"
        },
        "multiclass_python_file": {
            "dataset_path": "datasets_processed/cvefixes/cvefixes_multiclass_python_file.json",
            "task_type": "multiclass_vulnerability",
            "description": "Multi-class classification: Python file-level CWE identification"
        },
        "multiclass_python_method": {
            "dataset_path": "datasets_processed/cvefixes/cvefixes_multiclass_python_method.json",
            "task_type": "multiclass_vulnerability",
            "description": "Multi-class classification: Python method-level CWE identification"
        },
        "cwe_119": {
            "dataset_path": "datasets_processed/cvefixes/cvefixes_cwe_119.json",
            "task_type": "binary_cwe_specific",
            "cwe_type": "CWE-119",
            "description": "CWE-119: Improper Restriction of Operations within Bounds of Memory Buffer"
        },
        "cwe_120": {
            "dataset_path": "datasets_processed/cvefixes/cvefixes_cwe_120.json",
            "task_type": "binary_cwe_specific",
            "cwe_type": "CWE-120",
            "description": "CWE-120: Buffer Copy without Checking Size of Input (Classic Buffer Overflow)"
        },
        "cwe_125": {
            "dataset_path": "datasets_processed/cvefixes/cvefixes_cwe_125.json",
            "task_type": "binary_cwe_specific",
            "cwe_type": "CWE-125",
            "description": "CWE-125: Out-of-bounds Read"
        },
        "cwe_190": {
            "dataset_path": "datasets_processed/cvefixes/cvefixes_cwe_190.json",
            "task_type": "binary_cwe_specific",
            "cwe_type": "CWE-190",
            "description": "CWE-190: Integer Overflow or Wraparound"
        },
        "cwe_476": {
            "dataset_path": "datasets_processed/cvefixes/cvefixes_cwe_476.json",
            "task_type": "binary_cwe_specific",
            "cwe_type": "CWE-476",
            "description": "CWE-476: NULL Pointer Dereference"
        },
        "cwe_787": {
            "dataset_path": "datasets_processed/cvefixes/cvefixes_cwe_787.json",
            "task_type": "binary_cwe_specific",
            "cwe_type": "CWE-787",
            "description": "CWE-787: Out-of-bounds Write"
        }
    },
    "prompt_strategies": {
        "basic_security": {
            "name": "Basic Security Analysis",
            "system_prompt": "You are an expert security analyst specializing in static code analysis. Your task is to analyze code snippets and determine if they contain security vulnerabilities.\n\nInstructions:\n- Analyze the provided code carefully\n- Consider common vulnerability patterns (injection, buffer overflow, race conditions, etc.)\n- Respond with only \"VULNERABLE\" or \"SAFE\" - no additional explanation\n- Base your decision on concrete security risks, not coding style issues\n- Apply security analysis principles across different programming languages",
            "user_prompt": "Analyze this code for security vulnerabilities:\n\n{code}"
        },
        "detailed_analysis": {
            "name": "Detailed Security Analysis",
            "system_prompt": "You are a senior cybersecurity expert with deep knowledge of common weakness enumeration (CWE) patterns. Your task is to perform thorough static analysis of code to identify potential security vulnerabilities across multiple programming languages.\n\nAnalysis Guidelines:\n- Examine the code for buffer overflows, memory corruption, input validation issues\n- Check for proper bounds checking, integer overflow/underflow conditions\n- Look for race conditions, use-after-free, double-free patterns (in applicable languages)\n- Consider null pointer dereferences and uninitialized variables\n- Evaluate input sanitization and output encoding practices\n- Assess injection vulnerabilities (SQL, command, script injection)\n- Consider language-specific vulnerability patterns\n\nResponse Format: Respond with only \"VULNERABLE\" or \"SAFE\"",
            "user_prompt": "Please analyze the following code for security vulnerabilities:\n\n```\n{code}\n```"
        },
        "cwe_focused": {
            "name": "CWE-Focused Analysis",
            "system_prompt": "You are a static analysis security expert specializing in detecting specific vulnerability patterns. Your task is to analyze code snippets for {cwe_type} vulnerabilities specifically.\n\nFocus Areas for {cwe_type}:\n- Look specifically for patterns that match {cwe_type} vulnerability characteristics\n- Ignore other types of vulnerabilities that don't match {cwe_type}\n- Consider the specific weakness enumeration definition for {cwe_type}\n\nInstructions:\n- Respond with only \"VULNERABLE\" or \"SAFE\" - no additional explanation\n- Base your decision solely on {cwe_type} patterns",
            "user_prompt": "Analyze this code specifically for {cwe_type} vulnerabilities:\n\n{code}"
        },
        "context_aware": {
            "name": "Context-Aware Analysis",
            "system_prompt": "You are an experienced security code reviewer working on a critical system. Your responsibility is to identify potential security vulnerabilities that could be exploited in production across various programming languages.\n\nContext: You are reviewing code that will be deployed in a security-sensitive environment. The code may contain subtle vulnerabilities that could lead to system compromise, regardless of the programming language used.\n\nAnalysis approach:\n- Consider both obvious and subtle vulnerability patterns\n- Think about how an attacker might exploit the code\n- Pay attention to edge cases and error conditions\n- Consider the full execution context and language-specific risks\n- Evaluate both memory safety and logic-based vulnerabilities\n\nRespond with only \"VULNERABLE\" or \"SAFE\"",
            "user_prompt": "Review this production code for security vulnerabilities:\n\n{code}\n\nIs this code vulnerable to security exploits?"
        },
        "step_by_step": {
            "name": "Step-by-Step Analysis",
            "system_prompt": "You are a methodical security analyst who follows a systematic approach to vulnerability detection across multiple programming languages.\n\nAnalysis Steps:\n1. Read through the code to understand its purpose and language\n2. Identify all input sources and data flows\n3. Check for proper input validation and bounds checking\n4. Look for memory management issues (in applicable languages)\n5. Examine error handling and edge cases\n6. Consider language-specific vulnerability patterns\n7. Determine if vulnerabilities exist\n\nFinal Answer: After your analysis, respond with only \"VULNERABLE\" or \"SAFE\"",
            "user_prompt": "Systematically analyze this code for security vulnerabilities:\n\n{code}"
        },
        "multiclass_basic": {
            "name": "Basic Multiclass Vulnerability Analysis",
            "system_prompt": "You are an expert security analyst specializing in vulnerability classification across multiple programming languages. Your task is to analyze code snippets and identify the specific type of vulnerability present, or determine if the code is safe.\n\nInstructions:\n- Analyze the provided code carefully for security vulnerabilities\n- If vulnerable, identify the specific CWE (Common Weakness Enumeration) type\n- If safe, respond with \"SAFE\"\n- Common vulnerability types include: CWE-119 (Improper Restriction), CWE-120 (Buffer Copy without Checking), CWE-125 (Out-of-bounds Read), CWE-190 (Integer Overflow), CWE-476 (NULL Pointer Dereference), CWE-787 (Out-of-bounds Write), CWE-89 (SQL Injection), CWE-79 (Cross-site Scripting), etc.\n- Consider vulnerabilities specific to the programming language being analyzed\n- Respond with only the CWE identifier (e.g., \"CWE-125\") or \"SAFE\" - no additional explanation",
            "user_prompt": "Classify the vulnerability type in this code:\n\n{code}"
        },
        "multiclass_detailed": {
            "name": "Detailed Multiclass Vulnerability Analysis",
            "system_prompt": "You are a senior cybersecurity expert with deep knowledge of Common Weakness Enumeration (CWE) patterns. Your task is to perform thorough static analysis of code to identify and classify specific vulnerability types across multiple programming languages.\n\nAnalysis Guidelines:\n- Examine the code for various vulnerability patterns:\n  * Buffer overflows/underflows (CWE-119, CWE-120, CWE-125, CWE-787) - primarily in C/C++\n  * Integer overflows/underflows (CWE-190) - across all languages\n  * Null pointer dereferences (CWE-476) - across all languages\n  * Injection vulnerabilities (CWE-89 SQL, CWE-79 XSS, CWE-78 Command) - primarily in web/database languages\n  * Memory management issues - language dependent\n  * Input validation problems - across all languages\n  * Deserialization vulnerabilities - in Java, Python, etc.\n- Consider the specific characteristics of each CWE type\n- Pay attention to context, data flow, and language-specific risks\n- Focus on CVE-level vulnerabilities that have been historically significant\n\nResponse Format: Respond with only the specific CWE identifier (e.g., \"CWE-125\") or \"SAFE\" if no vulnerabilities are found",
            "user_prompt": "Analyze and classify the vulnerability type in this code:\n\n```\n{code}\n```"
        },
        "multiclass_comprehensive": {
            "name": "Comprehensive Multiclass Analysis",
            "system_prompt": "You are an experienced security code reviewer specializing in vulnerability classification for production systems across multiple programming languages. Your responsibility is to identify and classify the specific type of security vulnerability present in code snippets.\n\nContext: You are reviewing code from real-world CVE cases that needs precise vulnerability classification for security assessment. Each vulnerability type has distinct characteristics and exploitation patterns that may vary by programming language.\n\nClassification approach:\n- Systematically examine the code for known vulnerability patterns\n- Consider the root cause and exploitation mechanism\n- Match patterns to specific CWE classifications\n- Distinguish between similar vulnerability types (e.g., CWE-125 vs CWE-787)\n- Consider edge cases and subtle vulnerability indicators\n- Focus on historically significant vulnerability types found in CVE databases\n- Account for language-specific vulnerability manifestations\n\nAvailable CWE types: CWE-119, CWE-120, CWE-125, CWE-190, CWE-476, CWE-787, CWE-89, CWE-79, CWE-78, and others\n\nRespond with only the specific CWE identifier or \"SAFE\"",
            "user_prompt": "Classify the specific vulnerability type in this production code:\n\n{code}\n\nWhat is the precise CWE classification?"
        }
    },
    "model_configurations": {
        "qwen3-4b": {
            "model_name": "Qwen/Qwen3-4B",
            "model_type": "QWEN",
            "max_tokens": 2048,
            "temperature": 0.1,
            "batch_size": 2,
            "use_quantization": true
        },
        "qwen3-4b-thinking": {
            "model_name": "Qwen/Qwen3-4B",
            "model_type": "QWEN",
            "max_tokens": 2048,
            "temperature": 0.1,
            "batch_size": 2,
            "use_quantization": true,
            "enable_thinking": true
        },
        "qwen3-8b": {
            "model_name": "Qwen/Qwen3-8B",
            "model_type": "QWEN",
            "max_tokens": 2048,
            "temperature": 0.1,
            "batch_size": 1,
            "use_quantization": true
        },
        "qwen3-8b-thinking": {
            "model_name": "Qwen/Qwen3-8B",
            "model_type": "QWEN",
            "max_tokens": 2048,
            "temperature": 0.1,
            "batch_size": 1,
            "use_quantization": true,
            "enable_thinking": true
        },
        "qwen3-30b": {
            "model_name": "Qwen/Qwen3-30B-A3B",
            "model_type": "QWEN",
            "batch_size": 2,
            "max_tokens": 2048,
            "temperature": 0.1,
            "use_quantization": true,
            "enable_thinking": false
        },
        "qwen3-30b-thinking": {
            "model_name": "Qwen/Qwen3-30B-A3B",
            "model_type": "QWEN",
            "batch_size": 2,
            "max_tokens": 2048,
            "temperature": 0.1,
            "use_quantization": true,
            "enabile_thinking": true
        },
        "deepseek-coder-v2-lite-16b": {
            "model_name": "deepseek-ai/DeepSeek-Coder-V2-Lite-Instruct",
            "model_type": "DEEPSEEK",
            "max_tokens": 2048,
            "temperature": 0.1,
            "batch_size": 2,
            "use_quantization": true
        },
        "deepseek-r1-distill-qwen2.5-7b": {
            "model_name": "deepseek-ai/DeepSeek-R1-Distill-Qwen-7B",
            "model_type": "DEEPSEEK",
            "max_tokens": 2048,
            "temperature": 0.1,
            "batch_size": 2,
            "use_quantization": true
        },
        "deepseek-r1-distill-qwen2.5-32b": {
            "model_name": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B",
            "model_type": "DEEPSEEK",
            "max_tokens": 2048,
            "temperature": 0.1,
            "batch_size": 2,
            "use_quantization": true
        },
        "wizard-coder-34b": {
            "model_name": "WizardLMTeam/WizardCoder-33B-V1.1",
            "model_type": "WIZARD",
            "max_tokens": 2048,
            "temperature": 0.1,
            "batch_size": 2,
            "use_quantization": true
        },
        "llama3.2-3B": {
            "model_name": "meta-llama/Llama-3.2-3B-Instruct",
            "model_type": "LLAMA",
            "max_tokens": 512,
            "temperature": 0.1,
            "batch_size": 1,
            "use_quantization": true
        },
        "llama4-scout-17b-16e": {
            "model_name": "meta-llama/Llama-4-Scout-17B-16E-Instruct",
            "model_type": "LLAMA",
            "max_tokens": 1024,
            "temperature": 0.1,
            "batch_size": 2,
            "use_quantization": true
        },
        "gemma3-4b": {
            "model_name": "google/gemma-3-4b-it-qat-q4_0-unquantized",
            "model_type": "GEMMA",
            "max_tokens": 1024,
            "temperature": 0.1,
            "batch_size": 2,
            "use_quantization": true
        },
        "gemma3-27b": {
            "model_name": "google/gemma-3-27b-it",
            "model_type": "GEMMA",
            "max_tokens": 1024,
            "temperature": 0.1,
            "batch_size": 2,
            "use_quantization": true
        }
    },
    "experiment_plans": {
        "quick_test": {
            "description": "Quick test with limited samples for binary classification development",
            "datasets": [
                "binary_c_file",
                "binary_java_file",
                "binary_python_file"
            ],
            "models": [
                "qwen3-4b",
                "llama3.2-3B",
                "gemma3-4b",
                "deepseek-r1-distill-qwen2.5-1.5b"
            ],
            "prompts": [
                "basic_security",
                "detailed_analysis",
                "context_aware"
            ],
            "sample_limit": 10
        },
        "multiclass_quick_test": {
            "description": "Quick test for multiclass classification with limited samples",
            "datasets": [
                "multiclass_c_file",
                "multiclass_java_file",
                "multiclass_python_file"
            ],
            "models": [
                "qwen3-4b",
                "llama3.2-3B",
                "gemma3-4b"
            ],
            "prompts": [
                "multiclass_basic",
                "multiclass_detailed"
            ],
            "sample_limit": 10
        },
        "prompt_comparison": {
            "description": "Compare different prompt strategies on binary classification",
            "datasets": [
                "binary_c_file",
                "binary_java_file",
                "binary_python_file"
            ],
            "models": [
                "qwen3-4b"
            ],
            "prompts": [
                "basic_security",
                "detailed_analysis",
                "context_aware",
                "step_by_step"
            ],
            "sample_limit": null
        },
        "small_models_cwe_specific_analysis": {
            "description": "CWE-specific vulnerability detection",
            "datasets": [
                "cwe_119",
                "cwe_120",
                "cwe_125",
                "cwe_190",
                "cwe_476",
                "cwe_787"
            ],
            "models": [
                "qwen3-4b",
                "qwen3-4b-thinking",
                "qwen3-8b",
                "qwen3-8b-thinking",
                "llama3.2-3B",
                "gemma3-4b",
                "deepseek-r1-distill-qwen2.5-7b"
            ],
            "prompts": [
                "cwe_focused"
            ],
            "sample_limit": 20
        },
        "small_models_binary": {
            "description": "Small models evaluation on binary classification tasks",
            "datasets": [
                "binary_python_file"
            ],
            "models": [
                "qwen3-4b",
                "qwen3-4b-thinking",
                "qwen3-8b",
                "qwen3-8b-thinking",
                "llama3.2-3B",
                "gemma3-4b",
                "deepseek-r1-distill-qwen2.5-7b"
            ],
            "prompts": [
                "detailed_analysis"
            ],
            "sample_limit": 50
        },
        "small_models_multiclass": {
            "description": "Small models evaluation on multiclass classification",
            "datasets": [
                "multiclass_java_file",
                "multiclass_python_file"
            ],
            "models": [
                "qwen3-4b",
                "qwen3-4b-thinking",
                "qwen3-8b",
                "qwen3-8b-thinking",
                "llama3.2-3B",
                "gemma3-4b",
                "deepseek-r1-distill-qwen2.5-7b"
            ],
            "prompts": [
                "multiclass_comprehensive"
            ],
            "sample_limit": 100
        },
        "large_models_binary": {
            "description": "Large models evaluation on binary classification tasks",
            "datasets": [
                "binary_c_file",
                "binary_c_method",
                "binary_java_file",
                "binary_java_method",
                "binary_python_file",
                "binary_python_method"
            ],
            "models": [
                "qwen3-30b",
                "qwen3-30b-thinking",
                "deepseek-coder-v2-lite-16b",
                "deepseek-r1-distill-qwen2.5-32b",
                "wizard-coder-34b",
                "llama4-scout-17b-16e",
                "gemma3-27b"
            ],
            "prompts": [
                "detailed_analysis",
                "step_by_step"
            ],
            "sample_limit": 50
        },
        "large_models_cwe_specific_analysis": {
            "description": "Large models evaluation on CWE classification tasks",
            "datasets": [
                "cwe_119",
                "cwe_120",
                "cwe_125",
                "cwe_190",
                "cwe_476",
                "cwe_787"
            ],
            "models": [
                "qwen3-30b",
                "qwen3-30b-thinking",
                "deepseek-coder-v2-lite-16b",
                "deepseek-r1-distill-qwen2.5-32b",
                "wizard-coder-34b",
                "llama4-scout-17b-16e",
                "gemma3-27b"
            ],
            "prompts": [
                "cwe_focused"
            ],
            "sample_limit": 50
        },
        "large_models_multiclass": {
            "description": "Large models evaluation on multiclass classification",
            "datasets": [
                "multiclass_c_file",
                "multiclass_c_method",
                "multiclass_java_file",
                "multiclass_java_method",
                "multiclass_python_file",
                "multiclass_python_method"
            ],
            "models": [
                "qwen3-30b",
                "qwen3-30b-thinking",
                "deepseek-coder-v2-lite-16b",
                "deepseek-r1-distill-qwen2.5-32b",
                "wizard-coder-34b",
                "llama4-scout-17b-16e",
                "gemma3-27b"
            ],
            "prompts": [
                "multiclass_comprehensive"
            ],
            "sample_limit": 50
        }
    },
    "output_settings": {
        "base_output_dir": "results/cvefixes_experiments",
        "create_subdirs": true,
        "save_predictions": true,
        "save_metrics": true,
        "save_detailed_report": true,
        "include_timestamp": true
    },
    "evaluation_settings": {
        "metrics": [
            "accuracy",
            "precision",
            "recall",
            "f1",
            "auc"
        ],
        "calculate_per_cwe": true,
        "create_confusion_matrix": true,
        "analyze_errors": true
    }
}