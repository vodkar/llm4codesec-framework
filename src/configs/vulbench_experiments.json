{
    "experiment_metadata": {
        "name": "VulBench Benchmark LLM Evaluation",
        "description": "Comprehensive evaluation of LLMs on VulBench benchmark with multiple prompt strategies",
        "version": "1.0",
        "dataset": "VulBench v1.0",
        "created_date": "2025-01-16"
    },
    "dataset_configurations": {
        "binary_d2a": {
            "dataset_path": "datasets_processed/vulbench/vulbench_binary_d2a.json",
            "task_type": "binary_vulnerability",
            "description": "Binary classification: D2A vulnerability detection"
        },
        "binary_ctf": {
            "dataset_path": "datasets_processed/vulbench/vulbench_binary_ctf.json",
            "task_type": "binary_vulnerability",
            "description": "Binary classification: CTF vulnerability detection"
        },
        "binary_magma": {
            "dataset_path": "datasets_processed/vulbench/vulbench_binary_magma.json",
            "task_type": "binary_vulnerability",
            "description": "Binary classification: MAGMA vulnerability detection"
        },
        "binary_big_vul": {
            "dataset_path": "datasets_processed/vulbench/vulbench_binary_big_vul.json",
            "task_type": "binary_vulnerability",
            "description": "Binary classification: Big-Vul vulnerability detection"
        },
        "binary_devign": {
            "dataset_path": "datasets_processed/vulbench/vulbench_binary_devign.json",
            "task_type": "binary_vulnerability",
            "description": "Binary classification: Devign vulnerability detection"
        },
        "multiclass_d2a": {
            "dataset_path": "datasets_processed/vulbench/vulbench_multiclass_d2a.json",
            "task_type": "multiclass_vulnerability",
            "description": "Multi-class classification: D2A vulnerability type identification"
        },
        "multiclass_ctf": {
            "dataset_path": "datasets_processed/vulbench/vulbench_multiclass_ctf.json",
            "task_type": "multiclass_vulnerability",
            "description": "Multi-class classification: CTF vulnerability type identification"
        },
        "multiclass_magma": {
            "dataset_path": "datasets_processed/vulbench/vulbench_multiclass_magma.json",
            "task_type": "multiclass_vulnerability",
            "description": "Multi-class classification: MAGMA vulnerability type identification"
        },
        "multiclass_big_vul": {
            "dataset_path": "datasets_processed/vulbench/vulbench_multiclass_big_vul.json",
            "task_type": "multiclass_vulnerability",
            "description": "Multi-class classification: Big-Vul vulnerability type identification"
        },
        "multiclass_devign": {
            "dataset_path": "datasets_processed/vulbench/vulbench_multiclass_devign.json",
            "task_type": "multiclass_vulnerability",
            "description": "Multi-class classification: Devign vulnerability type identification"
        },
        "vulnerability_buffer_overflow": {
            "dataset_path": "datasets_processed/vulbench/vulbench_binary_buffer_overflow.json",
            "task_type": "binary_vulnerability_specific",
            "vulnerability_type": "Buffer-Overflow",
            "description": "Buffer-Overflow: Specific vulnerability detection"
        },
        "vulnerability_integer_overflow": {
            "dataset_path": "datasets_processed/vulbench/vulbench_binary_integer_overflow.json",
            "task_type": "binary_vulnerability_specific",
            "vulnerability_type": "Integer-Overflow",
            "description": "Integer-Overflow: Specific vulnerability detection"
        },
        "vulnerability_null_pointer_dereference": {
            "dataset_path": "datasets_processed/vulbench/vulbench_binary_null_pointer_dereference.json",
            "task_type": "binary_vulnerability_specific",
            "vulnerability_type": "Null-Pointer-Dereference",
            "description": "Null-Pointer-Dereference: Specific vulnerability detection"
        },
        "vulnerability_use_after_free": {
            "dataset_path": "datasets_processed/vulbench/vulbench_binary_use_after_free.json",
            "task_type": "binary_vulnerability_specific",
            "vulnerability_type": "Use-After-Free",
            "description": "Use-After-Free: Specific vulnerability detection"
        },
        "vulnerability_memory_leak": {
            "dataset_path": "datasets_processed/vulbench/vulbench_binary_memory_leak.json",
            "task_type": "binary_vulnerability_specific",
            "vulnerability_type": "Memory-Leak",
            "description": "Memory-Leak: Specific vulnerability detection"
        },
        "vulnerability_race_condition": {
            "dataset_path": "datasets_processed/vulbench/vulbench_binary_race_condition.json",
            "task_type": "binary_vulnerability_specific",
            "vulnerability_type": "Race-Condition",
            "description": "Race-Condition: Specific vulnerability detection"
        }
    },
    "prompt_strategies": {
        "basic_security": {
            "name": "Basic Security Analysis",
            "system_prompt": "You are an expert security analyst specializing in static code analysis of C/C++ programs. Your task is to analyze code snippets and determine if they contain security vulnerabilities.\n\nInstructions:\n- Analyze the provided C/C++ code carefully\n- Consider common vulnerability patterns (buffer overflow, integer overflow, null pointer dereference, etc.)\n- Respond with only \"VULNERABLE\" or \"SAFE\" - no additional explanation\n- Base your decision on concrete security risks, not coding style issues",
            "user_prompt": "Analyze this C/C++ code for security vulnerabilities:\n\n{code}"
        },
        "detailed_analysis": {
            "name": "Detailed Security Analysis",
            "system_prompt": "You are a senior cybersecurity expert with deep knowledge of C/C++ vulnerabilities and common weakness enumeration (CWE) patterns. Your task is to perform thorough static analysis of C/C++ code to identify potential security vulnerabilities.\n\nAnalysis Guidelines:\n- Examine the code for buffer overflows, memory corruption, input validation issues\n- Check for proper bounds checking, integer overflow/underflow conditions\n- Look for null pointer dereferences and uninitialized variables\n- Consider memory management issues (use-after-free, double-free)\n- Evaluate input sanitization and bounds checking\n\nResponse Format: Respond with only \"VULNERABLE\" or \"SAFE\"",
            "user_prompt": "Please analyze the following C/C++ code for security vulnerabilities:\n\n```c\n{code}\n```"
        },
        "context_aware": {
            "name": "Context-Aware Analysis",
            "system_prompt": "You are an experienced security code reviewer working on a critical C/C++ system. Your responsibility is to identify potential security vulnerabilities that could be exploited in production.\n\nContext: You are reviewing C/C++ code that will be deployed in a security-sensitive environment. The code may contain subtle vulnerabilities that could lead to system compromise.\n\nAnalysis approach:\n- Consider both obvious and subtle vulnerability patterns\n- Think about how an attacker might exploit the code\n- Pay attention to edge cases and error conditions\n- Consider the full execution context and memory safety\n\nRespond with only \"VULNERABLE\" or \"SAFE\"",
            "user_prompt": "Review this production C/C++ code for security vulnerabilities:\n\n{code}\n\nIs this code vulnerable to security exploits?"
        },
        "step_by_step": {
            "name": "Step-by-Step Analysis",
            "system_prompt": "You are a methodical security analyst who follows a systematic approach to C/C++ vulnerability detection.\n\nAnalysis Steps:\n1. Read through the code to understand its purpose\n2. Identify all input sources and data flows\n3. Check for proper input validation and bounds checking\n4. Look for memory management issues\n5. Examine error handling and edge cases\n6. Determine if vulnerabilities exist\n\nFinal Answer: After your analysis, respond with only \"VULNERABLE\" or \"SAFE\"",
            "user_prompt": "Systematically analyze this C/C++ code for security vulnerabilities:\n\n{code}"
        },
        "multiclass_basic": {
            "name": "Basic Multiclass Vulnerability Analysis",
            "system_prompt": "You are an expert security analyst specializing in vulnerability classification in C/C++ programs. Your task is to analyze code snippets and identify the specific type of vulnerability present, or determine if the code is safe.\n\nInstructions:\n- Analyze the provided C/C++ code carefully for security vulnerabilities\n- If vulnerable, identify the specific vulnerability type\n- If safe, respond with \"SAFE\"\n- Common vulnerability types include: Integer-Overflow, Buffer-Overflow, Null-Pointer-Dereference, Use-After-Free, Double-Free, Memory-Leak, etc.\n- Respond with only the vulnerability type (e.g., \"Integer-Overflow\") or \"SAFE\" - no additional explanation",
            "user_prompt": "Classify the vulnerability type in this C/C++ code:\n\n{code}"
        },
        "multiclass_detailed": {
            "name": "Detailed Multiclass Vulnerability Analysis",
            "system_prompt": "You are a senior cybersecurity expert with deep knowledge of C/C++ vulnerability patterns. Your task is to perform thorough static analysis of C/C++ code to identify and classify specific vulnerability types.\n\nAnalysis Guidelines:\n- Examine the code for various vulnerability patterns:\n  * Buffer overflows/underflows (Buffer-Overflow)\n  * Integer overflows/underflows (Integer-Overflow)\n  * Memory management issues (Memory-Leak, Use-After-Free, Double-Free)\n  * Null pointer dereferences (Null-Pointer-Dereference)\n  * Format string vulnerabilities (Format-String)\n- Consider the specific characteristics of each vulnerability type\n- Pay attention to context and data flow in C/C++ programs\n\nResponse Format: Respond with only the specific vulnerability type (e.g., \"Buffer-Overflow\") or \"SAFE\" if no vulnerabilities are found",
            "user_prompt": "Analyze and classify the vulnerability type in this C/C++ code:\n\n```c\n{code}\n```"
        },
        "multiclass_comprehensive": {
            "name": "Comprehensive Multiclass Analysis",
            "system_prompt": "You are an experienced security code reviewer specializing in vulnerability classification for production C/C++ systems. Your responsibility is to identify and classify the specific type of security vulnerability present in code snippets.\n\nContext: You are reviewing C/C++ code that needs precise vulnerability classification for security assessment. Each vulnerability type has distinct characteristics and exploitation patterns.\n\nClassification approach:\n- Systematically examine the code for known vulnerability patterns\n- Consider the root cause and exploitation mechanism\n- Match patterns to specific vulnerability classifications\n- Distinguish between similar vulnerability types\n- Consider edge cases and subtle vulnerability indicators\n\nAvailable vulnerability types: Integer-Overflow, Buffer-Overflow, Null-Pointer-Dereference, Use-After-Free, Double-Free, Memory-Leak, Format-String\n\nRespond with only the specific vulnerability type or \"SAFE\"",
            "user_prompt": "Classify the specific vulnerability type in this production C/C++ code:\n\n{code}\n\nWhat is the precise vulnerability classification?"
        },
        "vulnerability_focused": {
            "name": "Vulnerability-Focused Analysis",
            "system_prompt": "You are a static analysis security expert specializing in detecting specific vulnerability patterns in C/C++ code. Your task is to analyze code snippets for {cwe_type} vulnerabilities specifically.\n\nFocus Areas for {cwe_type}:\n- Look specifically for patterns that match {cwe_type} vulnerability characteristics\n- Ignore other types of vulnerabilities that don't match {cwe_type}\n- Consider the specific weakness characteristics for {cwe_type}\n\nInstructions:\n- Respond with only \"VULNERABLE\" or \"SAFE\" - no additional explanation\n- Base your decision solely on {cwe_type} patterns",
            "user_prompt": "Analyze this C/C++ code specifically for {cwe_type} vulnerabilities:\n\n{code}"
        },
        "vulnerability_comprehensive": {
            "name": "Comprehensive Vulnerability-Specific Analysis",
            "system_prompt": "You are a senior security expert specializing in {cwe_type} detection in C/C++ programs. Your responsibility is to identify potential {cwe_type} vulnerabilities that could be exploited.\n\nContext: You are specifically looking for {cwe_type} patterns in production C/C++ code.\n\n{cwe_type} Detection Guidelines:\n- Focus on code patterns that could lead to {cwe_type}\n- Consider data flow and variable usage patterns\n- Look for missing checks, improper bounds validation, or unsafe operations\n- Pay attention to memory operations, pointer usage, and input handling\n- Consider edge cases and error conditions specific to {cwe_type}\n\nRespond with only \"VULNERABLE\" or \"SAFE\"",
            "user_prompt": "Analyze this production C/C++ code specifically for {cwe_type}:\n\n{code}\n\nDoes this code contain a {cwe_type} vulnerability?"
        },
        "vulnerability_expert": {
            "name": "Expert Vulnerability-Specific Analysis",
            "system_prompt": "You are a world-class security researcher with deep expertise in {cwe_type} vulnerabilities in C/C++ systems. Your task is to perform expert-level analysis to detect {cwe_type} patterns.\n\nExpertise Areas:\n- Deep understanding of {cwe_type} root causes and exploitation techniques\n- Knowledge of subtle and complex {cwe_type} patterns\n- Experience with real-world {cwe_type} vulnerabilities\n- Understanding of compiler behavior and runtime implications\n\nAnalysis Approach:\n- Apply expert knowledge of {cwe_type} patterns\n- Consider both obvious and subtle manifestations\n- Think like an attacker looking for {cwe_type} exploits\n- Focus exclusively on {cwe_type} - ignore other vulnerability types\n\nRespond with only \"VULNERABLE\" or \"SAFE\"",
            "user_prompt": "As a {cwe_type} expert, analyze this C/C++ code:\n\n{code}\n\nIs there a {cwe_type} vulnerability present?"
        }
    },
    "model_configurations": {
        "qwen3-4b": {
            "model_name": "Qwen/Qwen3-4B",
            "model_type": "QWEN",
            "max_tokens": 2048,
            "temperature": 0.1,
            "batch_size": 20,
            "use_quantization": true
        },
        "qwen3-4b-thinking": {
            "model_name": "Qwen/Qwen3-4B",
            "model_type": "QWEN",
            "max_tokens": 2048,
            "temperature": 0.1,
            "batch_size": 15,
            "use_quantization": true,
            "enable_thinking": true
        },
        "qwen3-8b": {
            "model_name": "Qwen/Qwen3-8B",
            "model_type": "QWEN",
            "max_tokens": 2048,
            "temperature": 0.1,
            "batch_size": 15,
            "use_quantization": true
        },
        "qwen3-8b-thinking": {
            "model_name": "Qwen/Qwen3-8B",
            "model_type": "QWEN",
            "max_tokens": 2048,
            "temperature": 0.1,
            "batch_size": 10,
            "use_quantization": true,
            "enable_thinking": true
        },
        "qwen3-30b": {
            "model_name": "Qwen/Qwen3-30B-A3B",
            "model_type": "QWEN",
            "batch_size": 2,
            "max_tokens": 2048,
            "temperature": 0.1,
            "use_quantization": true,
            "enable_thinking": false
        },
        "qwen3-30b-thinking": {
            "model_name": "Qwen/Qwen3-30B-A3B",
            "model_type": "QWEN",
            "batch_size": 2,
            "max_tokens": 2048,
            "temperature": 0.1,
            "use_quantization": true,
            "enabile_thinking": true
        },
        "deepseek-coder-v2-lite-16b": {
            "model_name": "deepseek-ai/DeepSeek-Coder-V2-Lite-Instruct",
            "model_type": "DEEPSEEK",
            "max_tokens": 2048,
            "temperature": 0.1,
            "batch_size": 2,
            "use_quantization": true
        },
        "deepseek-r1-distill-qwen2.5-7b": {
            "model_name": "deepseek-ai/DeepSeek-R1-Distill-Qwen-7B",
            "model_type": "DEEPSEEK",
            "max_tokens": 2048,
            "temperature": 0.1,
            "batch_size": 20,
            "use_quantization": true
        },
        "deepseek-r1-distill-qwen2.5-32b": {
            "model_name": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B",
            "model_type": "DEEPSEEK",
            "max_tokens": 2048,
            "temperature": 0.1,
            "batch_size": 2,
            "use_quantization": true
        },
        "wizard-coder-34b": {
            "model_name": "WizardLMTeam/WizardCoder-33B-V1.1",
            "model_type": "WIZARD",
            "max_tokens": 2048,
            "temperature": 0.1,
            "batch_size": 2,
            "use_quantization": true
        },
        "llama3.2-3B": {
            "model_name": "meta-llama/Llama-3.2-3B-Instruct",
            "model_type": "LLAMA",
            "max_tokens": 1024,
            "temperature": 0.1,
            "batch_size": 15,
            "use_quantization": true
        },
        "llama4-scout-17b-16e": {
            "model_name": "meta-llama/Llama-4-Scout-17B-16E-Instruct",
            "model_type": "LLAMA",
            "max_tokens": 1024,
            "temperature": 0.1,
            "batch_size": 2,
            "use_quantization": true
        },
        "gemma3-4b": {
            "model_name": "google/gemma-3-4b-it-qat-q4_0-unquantized",
            "model_type": "GEMMA",
            "max_tokens": 1024,
            "temperature": 0.1,
            "batch_size": 30,
            "use_quantization": true
        },
        "gemma3-27b": {
            "model_name": "google/gemma-3-27b-it",
            "model_type": "GEMMA",
            "max_tokens": 1024,
            "temperature": 0.1,
            "batch_size": 2,
            "use_quantization": true
        }
    },
    "experiment_plans": {
        "quick_test": {
            "description": "Quick test with limited samples for development",
            "datasets": [
                "binary_d2a"
            ],
            "models": [
                "deepseek-r1-distill-qwen2.5-1.5b"
            ],
            "prompts": [
                "context_aware"
            ],
            "sample_limit": 10
        },
        "multiclass_quick_test": {
            "description": "Quick test for multiclass classification with limited samples",
            "datasets": [
                "multiclass_d2a"
            ],
            "models": [
                "gemma3-4b"
            ],
            "prompts": [
                "multiclass_detailed"
            ],
            "sample_limit": 10
        },
        "prompt_comparison": {
            "description": "Compare different prompt strategies on binary classification",
            "datasets": [
                "binary_d2a"
            ],
            "models": [
                "qwen3-4b"
            ],
            "prompts": [
                "basic_security",
                "detailed_analysis",
                "context_aware",
                "step_by_step"
            ],
            "sample_limit": 100
        },
        "multiclass_prompt_comparison": {
            "description": "Compare different prompt strategies on multiclass classification",
            "datasets": [
                "multiclass_d2a"
            ],
            "models": [
                "qwen3-4b"
            ],
            "prompts": [
                "multiclass_basic",
                "multiclass_detailed",
                "multiclass_comprehensive"
            ],
            "sample_limit": 100
        },
        "small_models_binary": {
            "description": "Evaluate small models on binary classification",
            "datasets": [
                "binary_d2a",
                "binary_ctf",
                "binary_magma",
                "binary_big_vul",
                "binary_devign"
            ],
            "models": [
                "qwen3-4b",
                "qwen3-4b-thinking",
                "qwen3-8b",
                "qwen3-8b-thinking",
                "llama3.2-3B",
                "gemma3-4b",
                "deepseek-r1-distill-qwen2.5-7b"
            ],
            "prompts": [
                "detailed_analysis"
            ],
            "sample_limit": 50
        },
        "small_models_multiclass": {
            "description": "Evaluate small models on multiclass classification",
            "datasets": [
                "multiclass_d2a",
                "multiclass_ctf",
                "multiclass_magma",
                "multiclass_big_vul",
                "multiclass_devign"
            ],
            "models": [
                "qwen3-4b",
                "qwen3-4b-thinking",
                "qwen3-8b",
                "qwen3-8b-thinking",
                "llama3.2-3B",
                "gemma3-4b",
                "deepseek-r1-distill-qwen2.5-7b"
            ],
            "prompts": [
                "multiclass_comprehensive"
            ],
            "sample_limit": 50
        },
        "large_models_binary": {
            "description": "Evaluate large models on binary classification",
            "datasets": [
                "binary_d2a",
                "binary_ctf",
                "binary_magma",
                "binary_big_vul",
                "binary_devign"
            ],
            "models": [
                "qwen3-30b",
                "qwen3-30b-thinking",
                "deepseek-coder-v2-lite-16b",
                "deepseek-r1-distill-qwen2.5-32b",
                "wizard-coder-34b",
                "llama4-scout-17b-16e",
                "gemma3-27b"
            ],
            "prompts": [
                "detailed_analysis",
                "step_by_step"
            ],
            "sample_limit": 100
        },
        "large_models_multiclass": {
            "description": "Evaluate large models on multiclass classification",
            "datasets": [
                "multiclass_d2a",
                "multiclass_ctf",
                "multiclass_magma",
                "multiclass_big_vul",
                "multiclass_devign"
            ],
            "models": [
                "qwen3-30b",
                "qwen3-30b-thinking",
                "deepseek-coder-v2-lite-16b",
                "deepseek-r1-distill-qwen2.5-32b",
                "wizard-coder-34b",
                "llama4-scout-17b-16e",
                "gemma3-27b"
            ],
            "prompts": [
                "multiclass_comprehensive"
            ],
            "sample_limit": 100
        },
        "small_models_vulnerability_specific": {
            "description": "Small models evaluation on vulnerability-specific detection",
            "datasets": [
                "vulnerability_buffer_overflow",
                "vulnerability_integer_overflow",
                "vulnerability_null_pointer_dereference",
                "vulnerability_use_after_free",
                "vulnerability_memory_leak",
                "vulnerability_race_condition"
            ],
            "models": [
                "qwen3-4b",
                "qwen3-4b-thinking",
                "qwen3-8b",
                "qwen3-8b-thinking",
                "llama3.2-3B",
                "gemma3-4b",
                "deepseek-r1-distill-qwen2.5-7b"
            ],
            "prompts": [
                "vulnerability_expert"
            ],
            "sample_limit": 50
        },
        "quick_small_models_vulnerability_specific": {
            "description": "Small models evaluation on vulnerability-specific detection",
            "datasets": [
                "vulnerability_buffer_overflow",
                "vulnerability_integer_overflow",
                "vulnerability_null_pointer_dereference",
                "vulnerability_use_after_free",
                "vulnerability_memory_leak",
                "vulnerability_race_condition"
            ],
            "models": [
                "qwen3-4b",
                "qwen3-4b-thinking",
                "qwen3-8b",
                "qwen3-8b-thinking",
                "llama3.2-3B",
                "gemma3-4b",
                "deepseek-r1-distill-qwen2.5-7b"
            ],
            "prompts": [
                "vulnerability_expert"
            ],
            "sample_limit": 5
        },
        "large_models_vulnerability_specific": {
            "description": "Large models evaluation on vulnerability-specific detection",
            "datasets": [
                "vulnerability_buffer_overflow",
                "vulnerability_integer_overflow",
                "vulnerability_null_pointer_dereference",
                "vulnerability_use_after_free",
                "vulnerability_memory_leak",
                "vulnerability_race_condition"
            ],
            "models": [
                "qwen3-30b",
                "qwen3-30b-thinking",
                "deepseek-coder-v2-lite-16b",
                "deepseek-r1-distill-qwen2.5-32b",
                "wizard-coder-34b",
                "llama4-scout-17b-16e",
                "gemma3-27b"
            ],
            "prompts": [
                "vulnerability_expert"
            ],
            "sample_limit": 100
        },
        "quick_small_models_multiclass": {
            "description": "Quick Evaluate small models on multiclass classification",
            "datasets": [
                "multiclass_d2a"
            ],
            "models": [
                "qwen3-4b",
                "qwen3-4b-thinking",
                "qwen3-8b",
                "qwen3-8b-thinking",
                "llama3.2-3B",
                "gemma3-4b",
                "deepseek-r1-distill-qwen2.5-7b"
            ],
            "prompts": [
                "multiclass_comprehensive"
            ],
            "sample_limit": 2
        }
    },
    "output_settings": {
        "base_output_dir": "results/vulbench_experiments",
        "create_subdirs": true,
        "save_predictions": true,
        "save_metrics": true,
        "save_detailed_report": true,
        "include_timestamp": true
    },
    "evaluation_settings": {
        "metrics": [
            "auc",
            "accuracy",
            "precision",
            "recall",
            "f1"
        ],
        "calculate_per_cwe": true,
        "create_confusion_matrix": true,
        "analyze_errors": true
    }
}